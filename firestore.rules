rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /user_organization/{document} {
      allow read: if resource.data.userId == request.auth.uid;
    }

    match /organizations/{organization} {
      allow read: if isMember(organization);
      allow write: if isOwner(organization);
    }

    match /groups/{group} {
      allow read: if isMember(resource.data.organizationId);
      allow write: if isManager(request.resource.data.organizationId);
    }

    match /events/{event} {
      allow read: if isMember(resource.data.organizationId);
      allow write: if isMember(request.resource.data.organizationId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function getAccessId(organization) {
      return request.auth.uid + '-' + organization;
    }

    function getOrgAccess(organization) {
      return get(/databases/$(database)/documents/user_organization/$(getAccessId(organization))).data.access;
    }

    function isAdmin() {
      return false;
    }

    function isOwner(organization) {
      return isSignedIn() && getOrgAccess(organization) == 'owner';
    }

    function isManager(organization) {
      return isSignedIn() && getOrgAccess(organization) in ['owner', 'manager'];
    }

    function isMember(organization) {
      return isSignedIn() && getOrgAccess(organization) in ['owner', 'manager', 'member'];
    }
  }
}
